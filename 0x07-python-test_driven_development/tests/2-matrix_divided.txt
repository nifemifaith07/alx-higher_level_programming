doctest for 2-matrix_divided.py file

using "matrix_divided"
----------------------------------------------

Import function from module 
    >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Check for function and module doctstrings

    >>> mod = __import__("2-matrix_divided").__doc___
    >>> len(mod) > 1
    True

    >>> fxn __import__("2-matrix_divided").matrix_divided.__doc__
    >>> len(fxn) >1
    True

None as arguments
    >>> matrix_divided(None, 1)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, None)
	Traceback (most recent call last):
    ...
	TypeError: div must be a number

print matrix
    >>> matrix
     [[1, 2, 3], [4, 5, 6]]

Empty matrix
    >>> matrix_divided([], 1)
    []

List as matrix
    >>> matrix = [1, 2, 3]
    >>> matrix_divided(matrix, 1)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

reqular divisions with +ve/-ve ints and floats
    >>> matrix = [[2, 4, 6], [8, 10, 12]]

    >>> matrix_divided(matrix, 2)
    [[1, 2, 3], [4, 5, 6]]

    >>> matrix_divided(matrix, -0.5)
    [[-4, -8, -12], [-16, -20, -24]]

    >>> matrix = [[-2.5, -3.5], [-4.5, -5.5]]

    >>> matrix_divided(matrix, -5)
    [[0.5, 0.7], [0.9, 1.1]]

    >>> matrix_divided(matrix, 0.2)
    [[-12.5, -17.5], [-22.5, -27.6]]

1xn matrix:
    >>> matrix = [[1, 2, 3]]
	>>> matrix_divided(matrix, 2)
	[[0.5, 1.0, 1.5]]

nx1 matrix:
    >>> matrix = [[1], [2], [3]]
	>>> matrix_divided(matrix, 2)
	[[0.5], [1.0], [1.5]]

division by infinity:
	>>> matrix_divided(matrix, float('inf'))
	[[0.0], [0.0], [0.0]]

division with infinity in numerator:
	>>> matrix = [[1, float('inf'), 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 1)
    [[1.0, inf, 3.0], [4.0, 5.0, 6.0]]

Division with infinity in numerator and denomenator
	>>> matrix_divided(matrix, float('inf'))
    [[0.0, nan, 0.0], [0.0, 0.0, 0.0]]

list of list and non-list items
    >>> matrix = [[1, 2, 3], "Hello"]
	>>> matrix_divided(matrix, 1)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

uneven matrix
	>>> matrix = [[1, 2, 3], [4, 5, 6, 7]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
    ...
	TypeError: Each row of the matrix must have the same size

mix of ints, floats, and non-numbers
    >>> matrix = [[1, "H", 3], [4.1, 5, 6.8]]
    >>> matrix_divided(matrix, 11)
	Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

mix of ints, floats, tuple, and bool:
	>>> matrix = [[1, True, 3], [False, (5,), 6.8]]
    >>> matrix_divided(matrix, 11)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

div as non-number or zero
	>>> matrix = [[1, 2, 3], [4, 5, 6]]

    >>> matrix_divided(matrix, "A")
	Traceback (most recent call last):
    ...
    TypeError: div must be a number

    >>> matrix_divided(matrix, True)
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

Number of arguments
	>>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

	>>> matrix_divided(matrix)
	Traceback (most recent call last):
	...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

    >>> matrix_divided(matrix, 1, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() takes 2 positional arguments but 3 were given
